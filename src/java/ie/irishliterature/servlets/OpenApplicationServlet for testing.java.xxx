package ie.irishliterature.servlets;

import static ie.irishliterature.dao.GrantApplicationDAO.getAttachments;
import static ie.irishliterature.dao.GrantApplicationDAO.getExpertReaderEmail;
import static ie.irishliterature.dao.GrantApplicationDAO.getExpertReaderUserID;
import static ie.irishliterature.dao.GrantApplicationDAO.getcurrentTimeStamp;
import static ie.irishliterature.dao.GrantApplicationDAO.updateExpertReader;
import ie.irishliterature.db.DBException;
import ie.irishliterature.model.ExpertReader;
import ie.irishliterature.util.MailUtil;
import java.io.*;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.io.FilenameUtils;

@WebServlet(name = "OpenApplicationServlet", urlPatterns = {"/OpenApplicationServlet"})
public class OpenApplicationServlet extends HttpServlet {

    private final static Logger LOGGER
            = Logger.getLogger(OpenApplicationServlet.class.getCanonicalName());
    private static final long serialVersionUID = 7908187011456392847L;

    ////////////////////////////////////////////////////////////////////////////
    ///
    ///  For file upload
    ///
    ////////////////////////////////////////////////////////////////////////////
    private boolean isMultipart;
    private String filePath;
    private String rootPath;
    private final int maxFileSize = 50 * 1024;
    private final int maxMemSize = 4 * 1024;
    //  private File file;
    private String tempPath = "";

    ////////////////////////////////////////////////////////////////////////////
    ///
    ///  For Application
    ///
    ////////////////////////////////////////////////////////////////////////////
    private int ApplicationNumber = 0;
    private String ReferenceNumber;
    private String company;
    private int publisherID;
    private String userID;
    private String agreement; // path to file
    private String contract;  // path to file
    private String proposedDateOfPublication;
    private int proposedPrintRun;
    private String plannedPageExtent;
    private String translatorCV;
    private String translatorName;
    private String languages;
    private String appTargetLanguage;
    private String translatorNotes;
    private String numberOfPages;
    private String breakDownTranslatorFee;
    private String translatorFee;
    private String bookNotes;
    private String copySent;
    private String dateCopiesWereSent;
    private String copiesTranslationSample;  // path to file
    private String TCACCEPTED;
    private String gdprACCEPTED;
    private String ieAPPROVED;
    private String Status;
    private int copiesSent = 0;
    private int TC_ACCEPTED = 0;
    private int gdpr_ACCEPTED = 0;
    private int APPROVED = 0;
    private String Type;

    ////////////////////////////////////////////////////////////////////////////
    ///
    ///  For Publisher Contact details Update
    ///
    ////////////////////////////////////////////////////////////////////////////
    private String firstname;
    private String lastname;
    private String Address1;
    private String Address2;
    private String Address3;
    private String Address4;
    private String postCode;
    private String City;
    private String country;
    private String countryCode;
    private String Telephone;
    private String Email;
    private String Fax;
    private String WWW;
    private String DoNotMail;
    private String Bursaries;
    private String Founded;
    private String NumberOfTitles;
    private String companyNotes;
    private String DateModified;

    ////////////////////////////////////////////////////////////////////////////
    ///
    ///  For Book details
    ///
    ////////////////////////////////////////////////////////////////////////////
    private int bookID;

    private String referenceNumber;

    private ArrayList Author;

    private String authorName;

    private String AuthorFirstName;

    private String AuthorLastName;

    private ArrayList Translator;

    private String writerType;  // options Author, Editor, Translator

    private String Title;

    private String Publisher;

    private String publicationYear;

    private String Genre;

    private String Original;  //file path

    private String Addendum;  //file path

    private String ProofPayment;  //file path

    private String BankDetails;  //file path

    private String SignedLIContract;  //file path

    private String translationTitle;

    private String translationPublisher;

    private String translationPublisherYear;

    private String[] translatorArrayContent;

    private String[] authorArray;  //Array of Author/Title

    private String[] languageArray;

    private ArrayList Languages;

    private String physicalDescription;

    private int Duplicates;

    private String Copies;

    private String originalLanguage;

    private String originalPageExtent;

    private String amountRequested;

    private String targetLanguage;

    private String foreignPublisher;

    private String countryOfPublication;

    private String originalDateOfPublication;

    private String ISBN;

    private String ISSN;

    private String Series = "";

    ////////////////////////////////////////////////////////////////////////////
    ///
    ///  For Irish Literature Staff
    ///
    ////////////////////////////////////////////////////////////////////////////
    private String TranslatorTrackRecord;  //Array of Author/Title
    private String Cover;                   // path to file
    private String Sample_Sent_out; //  Date
    private String Sample_Returned; //  Date
    private String Reader_Report;
    private String Date_Contract_Sent_to_Publisher; //  Date
    private String Date_ILE_Acknowlegement_Approved; //  Date
    private String Date_Published_Books_Received; //  Date
    private String Date_Payment_Made_to_Publisher; //  Date
    private String Payment_Reference_Number;
    private String Comments_re_Application;
    private String Board_Meeting;
    private String Date_publisher_informed_of_meeting; //  Date 
    private String Award;
    private String Bilingual;
    private int award = 0; //    boolean
    private int bilingual = 0; //    boolean
    private String Amount_Requested;
    private String Amount_Approved;
    private String Comments_about_Meeting;
    private String Proposed_Publication_Date; //  Date
    private String Previous_Grant_Aid; // Array of Author/Title
    private String Press_cuttings;  //  boolean
    private String Sales_figures;
    private String Anthology; //Array of Author/Title
    private String message = "";

    @Override
    public void init() {

        // Get the file location where they would be stored.
        tempPath = "/home/markus/test/tempDir";
        rootPath = "/home/markus/public_html/test";

    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        HttpSession session = request.getSession();

        //  String task = "Start New Application";
        //  String[] authorArray;
        //  String task = request.getParameter("AssignExpertReader");
        //  String task = request.getParameter("task");
        //  String name = request.getParameter("name");
        //  String value = request.getParameter("value");
        String task = String.valueOf(request.getSession().getAttribute("task"));

        System.out.println("OpenApplicationServlet :: ");
        System.out.println("HttpSession session :: sess: " + task);
        System.out.println("Here we are >>>>>>>>>.   Open Applications :: OpenApplicationServlet");
        switch (task) {
            case "openApplications":
                System.out.println("openApplicationsn :: ");

                //set Status
                Status = "pending";
                int translatorArrayLength = 0;
                int languageArrayLength = 0;
                //set Timestamp and format
                String timeStamp = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss").format(new Date());
                Calendar now = Calendar.getInstance();

                //set Year used in filePath
                int year = now.get(Calendar.YEAR);
                String yearInString = String.valueOf(year);
//                String fn;

                int idxFolderNames = 0;
                java.sql.Timestamp timestamp = getcurrentTimeStamp();

                String[] fileNames = new String[6];
                //   String[] justFiles = new String[6];
                List<String> filesToBeMoved = new ArrayList<>();
//                List<String> fileDir = new ArrayList<>();
                List<String> longArrayList = new ArrayList<>();
                List<String> shortArrayList = new ArrayList<>();

//                String[] folderNames = {
//                    "Agreement",
//                    "Contract",
//                    "Addendum",
//                    "Translator_CV",
//                    "Original",
//                    "TranslationSample"
//                };
//                try {

                /*
                 * Check that we have a file upload request
                 */
                isMultipart = ServletFileUpload.isMultipartContent(request);
                System.out.println("isMultipart:: " + isMultipart);
                response.setContentType("text/html;charset=UTF-8");
                request.setCharacterEncoding("UTF-8");

                DiskFileItemFactory factory = new DiskFileItemFactory();

                /*
                 * maximum size that will be stored in memory
                 */
                factory.setSizeThreshold(maxMemSize);

                /*
                 * Location to save data that is larger than maxMemSize.
                 */
                factory.setRepository(new File(tempPath));

                /*
                 * Create a new file upload handler
                 */
                ServletFileUpload upload = new ServletFileUpload(factory);
                /*
                 * maximum file size to be uploaded.
                 */
                //  upload.setSizeMax(maxFileSize);

                /*
                 * Parse the request to get file items.
                 */
                List<FileItem> items = null;
                try {
                    items = upload.parseRequest(request);
                } catch (FileUploadException ex) {
                    Logger.getLogger(OpenApplicationServlet.class.getName()).log(Level.SEVERE, null, ex);
                }

//        idTranslationRightsHolder, ReferenceNumber, TranslationRightsHolderName
                for (FileItem item : items) {
                    if (item.isFormField()) {

                        /*
                         * Process regular form field (input
                         * type="text|radio|checkbox|etc", select, etc).
                         * collect all data input from input fileds
                         */
                        String fieldname = item.getFieldName();
                        String fieldvalue = item.getString();

                        System.out.println(fieldname + " >> " + fieldvalue + "\n");

                        if (fieldname.equals("authors")) {
                            String input = fieldvalue;
                            System.out.println("Original input string from client: " + input);

                            String encoded = URLEncoder.encode(input, "UTF-8");
                            System.out.println("URL-encoded by client with UTF-8: " + encoded);

                            String incorrectDecoded = URLDecoder.decode(encoded, "ISO-8859-1");
                            System.out.println("Then URL-decoded by server with ISO-8859-1: " + incorrectDecoded);

                            String correctDecoded = URLDecoder.decode(encoded, "UTF-8");
                            System.out.println("Server should URL-decode with UTF-8: " + correctDecoded);

                        }

                        if (fieldname.equals("rightsHolderArray")) {

                            System.out.println("rightsHolderArray >>>> HERE ");
                            String[] rightsHolderArray = fieldvalue.split(","); //split string by ","
                            int rightsHolderArrayLength = rightsHolderArray.length;
                            System.out.println("translatorArray >>>> rightsHolderArray.length " + rightsHolderArray.length);
                            for (String individualValue : rightsHolderArray) {
                                System.out.println("rightsHolderArray  GrantApplicationServlet:: " + individualValue + " ----------> translatorArrayLength::  " + translatorArrayLength);
                            }

                        }

                    } else {

                        //////////////////////////////////////////////////////////////
                        //  Process Application Form file field (input type="file") //
                        //////////////////////////////////////////////////////////////
                        String fieldname = item.getFieldName();
                        String filename = FilenameUtils.getName(item.getName());
                        System.out.println("filename zero fieldname  " + fieldname + " :: " + filename);

                    } // else

                }  // for (FileItem item : items)

//                }

                /*
                 * reset session
                 */
                session.removeAttribute("task");

                request.setAttribute("message", message);
                request.getRequestDispatcher("/WEB-INF/views/response.jsp").forward(request, response);
                break;

            case "New Applications":
                System.out.println("New Applications :: ");
                System.out.println("task: GrantApplicationServlet:: 1 " + task);
                request.getRequestDispatcher("/WEB-INF/views/newApplications.jsp").forward(request, response);
                break;

            case "Open Applications":
                System.out.println("Open Applications :: ");
                System.out.println("task: GrantApplicationServlet:: 2 " + task);
                request.getRequestDispatcher("/WEB-INF/views/openApplications.jsp").forward(request, response);
                break;

            case "Pending Applications":
                System.out.println("Pending Applications :: ");
                System.out.println("task: GrantApplicationServlet:: 3 " + task);
                request.getRequestDispatcher("/WEB-INF/views/pendingApplications.jsp").forward(request, response);
                break;

            case "Closed Applications":
                System.out.println("Closed Applications :: ");
                System.out.println("task: GrantApplicationServlet:: 4 " + task);
                request.getRequestDispatcher("/WEB-INF/views/closedApplications.jsp").forward(request, response);
                break;

            case "AssignExpertReader":
                String expertReaderEmail = "";
                List<String[]> fileAttachment = new ArrayList<>();

                String expertReaderName = request.getParameter("selectedUnassignedER");
                String expectedReturnDate = request.getParameter("expectedReturnDate");

                String newAssignedReferenceNumber = request.getParameter("NewAssignedERRefNo");

                int expertReaderUserID = 0;
                try {

                    expertReaderUserID = getExpertReaderUserID(expertReaderName);
                    expertReaderEmail = getExpertReaderEmail(expertReaderName);
                    fileAttachment = getAttachments(newAssignedReferenceNumber);

                } catch (DBException ex) {
                    Logger.getLogger(GrantApplicationServlet.class.getName()).log(Level.SEVERE, null, ex);
                }

                String originalPath;
                String originalName = "";
                String translationPath;
                String translationName = "";

                ////////////////////////////////////////////////////////////
                //  Process Application - INSERT new ExpertReader
                ////////////////////////////////////////////////////////////
                ExpertReader expertReader = new ExpertReader();

                expertReader.setExpertReaderUserID(expertReaderUserID);
                expertReader.setExpertReaderName(expertReaderName);
                expertReader.setReferenceNumber(newAssignedReferenceNumber);

                 {
                    try {
                        String[] attachFiles = new String[2];

                        for (String[] filePath : fileAttachment) {

                            originalPath = filePath[1].replace("/~markus", "/home/markus/public_html");
                            originalName = filePath[2];

                            translationPath = filePath[3].replace("/~markus", "/home/markus/public_html");
                            translationName = filePath[4];

                            attachFiles[0] = originalPath;
                            attachFiles[1] = translationPath;

                        }

                        java.sql.Date today = getTodaySQL();
                        int result = updateExpertReader(expertReader, today);

                        if (result > 0) {

                            try {

                                /*
                                 * send email with attachment
                                 */
                                MailUtil.sendEmailWithAttachmentExpertReader(expertReaderName, expertReaderEmail, attachFiles, expectedReturnDate);

                            } catch (MessagingException ex) {
                                Logger.getLogger(GrantApplicationServlet.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                    } catch (DBException ex) {
                        Logger.getLogger(GrantApplicationServlet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                message = "The email to '" + expertReaderName + "' has been sent/ <br/>"
                        + "electronic copies of " + originalName + " and " + translationName + "have been attached";
                request.setAttribute("message", message);
                request.getRequestDispatcher("/WEB-INF/views/response.jsp").forward(request, response);

                break;

        }

    }

    public void doGet(HttpServletRequest request,
            HttpServletResponse response)
            throws ServletException, java.io.IOException {

        throw new ServletException("GET method used with "
                + getClass().getName() + ": POST method required.");
    }

    public Date convertDate(String datum) throws ParseException {

        DateFormat sourceFormat = new SimpleDateFormat("dd/MM/yyyy");
        Date date = sourceFormat.parse(datum);

        return date;

    }

    public java.sql.Date getTodaySQL() {
        java.util.Date today = new java.util.Date();
        return new java.sql.Date(today.getTime());

    }

    public int getCounter(String counterIndicator) {

        int counter = 0;

        System.out.println("getCounter(String " + counterIndicator);

        if (counterIndicator.contains("-")) {

            String counterIndicatorArray[] = counterIndicator.split("-");
            for (int u = 0; u < counterIndicatorArray.length; u++) {
                System.out.println("counterIndicatorArray[" + u + "]" + Arrays.toString(counterIndicatorArray));
            }

            counter = Integer.parseInt(counterIndicatorArray[counterIndicatorArray.length - 1]) - 1;
        }

        System.out.println("counter  " + counter);

        return counter;
    }

    public String getFdname(String fieldname) {

        String fdname;

        String fdnameArray[] = fieldname.split("-");

        fdname = fdnameArray[0];

        System.out.println("getFdname(String " + fieldname);
        for (int v = 0; v < fdnameArray.length; v++) {
            System.out.println("fdnameArray[" + v + "]" + Arrays.toString(fdnameArray));
        }

        System.out.println("fdname  " + fdname);

        return fdname;
    }
}
